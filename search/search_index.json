{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This a collection of notes for various topics of C/C++</p>"},{"location":"c/compiler/","title":"Compiling and Running a C program","text":""},{"location":"c/compiler/#compilers","title":"Compilers","text":"<p>Compiler is a program that translates a C program to machine code or an intermediate code that can be understood by the system. It involves many the following steps:  <code>preprocessing</code>, <code>compiling</code>, <code>assembling</code> and <code>linking</code>. </p> <p></p>"},{"location":"c/compiler/#pre-processing","title":"Pre-processing","text":"<p>The pre-processor removes the comments from the files and adds additional components in the code like: * addition of the definitions under the header files added through <code>#include&lt;*.h&gt;</code> * addition of macros defined</p> <p>This step creates an additional intermediate file with a <code>.i</code> extension.</p>"},{"location":"c/compiler/#compiling","title":"Compiling","text":"<p>The intermediate file is then compiled to assembly code that is sent to the assembler.</p>"},{"location":"c/compiler/#assembler","title":"Assembler","text":"<p>The assembler converts the compiled file to machine code and creates an object file (with <code>.o</code> extension)</p>"},{"location":"c/compiler/#linker","title":"Linker","text":"<p>Linker links the library files with the object code where all the linking of function calls with their definitions is done. The final output by default is an executable file that can run directly on system.</p>"},{"location":"c/compiler/#the-gcc-compiler","title":"The GCC Compiler","text":"<p>GCC (GNU Compiler Collection) is one of the popular package that provides standarized compiler tools for C and C++. It can be installed on most systems including Windows, Linux Distros and macOS.</p>"},{"location":"c/compiler/#gcc-on-windows","title":"GCC on windows","text":"<p>GCC can be installed on windows using the MYSY2 utility tool. To install:</p> <ul> <li>click on the hyperlink above and install the program using the setup file.</li> <li>launch the program once installed</li> <li>paste this code in the active shell <pre><code>pacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain\n</code></pre></li> <li>Select the default option and let the download complete.</li> <li>Add <code>C:\\msys64\\ucrt64\\bin</code> (or the location of your <code>bin</code> installation) to the PATH variable.</li> </ul>"},{"location":"c/compiler/#gcc-on-linux","title":"GCC on linux","text":"<p>Most linux distros come with <code>gcc</code> pre-installed or as a dependency of some software you are using already. If you still want the to use the latest version of GCC, update it using the package manager of your choice.</p> <p>Heres a shell script for ubuntu users: ubuntu_installer.sh</p>"},{"location":"c/compiler/#gcc-on-macos","title":"GCC on macOS","text":"<p>GCC is available as a homebrew package and can be installed using <code>brew install gcc</code>. However, <code>clang</code> is much popular for development in macOS environments. </p>"},{"location":"c/structure/","title":"Structure of a C program","text":""},{"location":"c/structure/#hello-world","title":"hello, world!","text":"<p>This is a hello world program in C.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n    printf(\"hello, world!\\n\");\n    return 0;\n}\n</code></pre> <ul> <li>The <code>main</code> function is the entrypoint of our code. It's the part of code that runs first whenever the program is compiled and executed.</li> <li>The <code>printf</code> function displays the provided format string to the console.</li> <li>The main function must return either an integer or <code>void</code> (nothing).</li> <li><code>stdio.h</code> header file must be included in order to perform input and output operations with the terminal.</li> </ul>"},{"location":"c/structure/#parts-of-a-c-program","title":"Parts of a c program","text":"<p>Warning</p> <p>Contains functions and topics not covered yet for illustration purpose.</p> <pre><code>/*\n    This is a program illustrating various parts of a C program.\n*/\n#include&lt;stdio.h&gt;\n\n#define PI 3.14\n\nint square(int);\nfloat circle(int);\n\nint main() {\n  int a = 10;\n  printf(\"area of a square with side %d is %d\\n\", a, square(a));\n  printf(\"area of a circle with side %d is %.2f\\n\", a, circle(a));\n  return 0;\n}\n\nint square(int s) {\n  return s * s;\n}\nfloat circle(int r) {\n  return 3.14 * (float) r * (float) r;\n}\n</code></pre> <p>This code can be divided into parts:</p>"},{"location":"c/structure/#documentation","title":"Documentation","text":"<p>Comments explaining parts of the code comes under documentation <pre><code>/*\n    This is a program illustrating various parts of a C program.\n*/\n</code></pre></p>"},{"location":"c/structure/#pre-processor","title":"Pre-processor","text":"<p>Header files and definitions in the top of the file are pre-processors <pre><code>#include&lt;stdio.h&gt;\n\n#define PI 3.14\n</code></pre></p>"},{"location":"c/structure/#main-function","title":"main function","text":"<p>This is the entrypoint of the program. The main function should always return an <code>int</code> or <code>void</code>. If the program is able to run successfully <code>0</code> is returned. <pre><code>int main(){\n    ...\n    return 0;\n}\n</code></pre></p>"},{"location":"c/structure/#user-defined-functions","title":"User defined functions","text":"<p>User defined functions like  <code>square</code> and <code>circle</code> are used as sub-programs for organising code and providing reusability of code. <pre><code>int square(int);\nfloat circle(int);\n\nint square(int s) {\n  return s * s;\n}\nfloat circle(int r) {\n  return 3.14 * (float) r * (float) r;\n}\n</code></pre></p>"}]}