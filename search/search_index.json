{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This a collection of notes for various topics of C/C++</p>"},{"location":"c/compiler/","title":"Compiling and Running a C program","text":""},{"location":"c/compiler/#compilers","title":"Compilers","text":"<p>Compiler is a program that translates a C program to machine code or an intermediate code that can be understood by the system. It involves many the following steps:  <code>preprocessing</code>, <code>compiling</code>, <code>assembling</code> and <code>linking</code>. </p> <p></p>"},{"location":"c/compiler/#pre-processing","title":"Pre-processing","text":"<p>The pre-processor removes the comments from the files and adds additional components in the code like: * addition of the definitions under the header files added through <code>#include&lt;*.h&gt;</code> * addition of macros defined</p> <p>This step creates an additional intermediate file with a <code>.i</code> extension.</p>"},{"location":"c/compiler/#compiling","title":"Compiling","text":"<p>The intermediate file is then compiled to assembly code that is sent to the assembler.</p>"},{"location":"c/compiler/#assembler","title":"Assembler","text":"<p>The assembler converts the compiled file to machine code and creates an object file (with <code>.o</code> extension)</p>"},{"location":"c/compiler/#linker","title":"Linker","text":"<p>Linker links the library files with the object code where all the linking of function calls with their definitions is done. The final output by default is an executable file that can run directly on system.</p>"},{"location":"c/compiler/#the-gcc-compiler","title":"The GCC Compiler","text":"<p>GCC (GNU Compiler Collection) is one of the popular package that provides standarized compiler tools for C and C++. It can be installed on most systems including Windows, Linux Distros and macOS.</p>"},{"location":"c/compiler/#gcc-on-windows","title":"GCC on windows","text":"<p>GCC can be installed on windows using the MYSY2 utility tool. To install:</p> <ul> <li>click on the hyperlink above and install the program using the setup file.</li> <li>launch the program once installed</li> <li>paste this code in the active shell <pre><code>pacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain\n</code></pre></li> <li>Select the default option and let the download complete.</li> <li>Add <code>C:\\msys64\\ucrt64\\bin</code> (or the location of your <code>bin</code> installation) to the PATH variable.</li> </ul>"},{"location":"c/compiler/#gcc-on-linux","title":"GCC on linux","text":"<p>Most linux distros come with <code>gcc</code> pre-installed or as a dependency of some software you are using already. If you still want the to use the latest version of GCC, update it using the package manager of your choice.</p> <p>Heres a shell script for ubuntu users: ubuntu_installer.sh</p>"},{"location":"c/compiler/#gcc-on-macos","title":"GCC on macOS","text":"<p>GCC is available as a homebrew package and can be installed using <code>brew install gcc</code>. However, <code>clang</code> is much popular for development in macOS environments. </p>"},{"location":"c/d_types_ops/","title":"Data Types, Operators and Expressions","text":""},{"location":"c/d_types_ops/#data-types","title":"Data Types","text":"<p>Data types are used to represent the type of a variable or constant i.e. what type of data the variable/constant stores. They can be system defined and user defined.</p>"},{"location":"c/d_types_ops/#system-defined-generic","title":"System Defined (Generic)","text":"<p>There are 5 generic data types in C: <code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, <code>void</code>.</p>"},{"location":"c/d_types_ops/#definitions","title":"Definitions:","text":""},{"location":"c/d_types_ops/#integers-int","title":"Integers (<code>int</code>)","text":"<p>The <code>int</code> data type is used to represent a integer in the range <code>-2147483648</code> to <code>2147483647</code>. This data type uses <code>4 bytes</code> of memory. Example:  <pre><code>int num = 10;\n</code></pre></p>"},{"location":"c/d_types_ops/#floats-float","title":"Floats (<code>float</code>)","text":"<p>Floats are used to store floating type values like decimals and larger numbers with single point precision. This data type uses <code>4 bytes</code> of data. Example:  <pre><code>float dec = 10.21;\n</code></pre></p>"},{"location":"c/d_types_ops/#doubles-double","title":"Doubles (<code>double</code>)","text":"<p><code>double</code> stores double precision floating type values with a size of <code>64 bytes</code>. It can hold upto 17-18 digits of numbers easily. Example:  <pre><code>double doub = 120.123523;\n</code></pre></p>"},{"location":"c/d_types_ops/#characters-char","title":"Characters (<code>char</code>)","text":"<p>The <code>char</code> data type is used to store single character values. The size of these values is <code>1 byte</code>. The declaration of these variables use single quotes (<code>' '</code>) and can contain only one character. Example:  <pre><code>char a = 'a';\n</code></pre></p>"},{"location":"c/d_types_ops/#void-void","title":"Void (<code>void</code>)","text":"<p>Void is used to represent \"nothing\", it is used to specify that no value is present, it is usually used in return values of functions. Example; <pre><code>void sayHello(char name[]){\n    printf(\"hello %d\", name);\n}\n</code></pre></p>"},{"location":"c/d_types_ops/#modifiers","title":"Modifiers","text":"<p>Modifiers like <code>long</code>, <code>short</code>, <code>unsigned</code>, <code>signed</code> can be used to modify the behaviour of these data types.</p>"},{"location":"c/d_types_ops/#user-defined","title":"User Defined","text":"<p>User defined types can be created using Structures (<code>struct</code>), Typedefs (<code>typedef</code>), Unions (<code>union</code>) and Enums (<code>enum</code>). Example of a struct: <pre><code>#include&lt;stdio.h&gt;\n\nstruct Student {\n    int age;\n    int class;\n};\n\nint main(){\n    struct Student student;\n    student.age = 16;\n    student.class = 11;\n    printf(\"age of the student is: %d\", student.age);\n}\n</code></pre> The <code>Student</code> struct acts like a special type that can store class and age of a student can be accesed in other parts of the code.</p>"},{"location":"c/d_types_ops/#operators","title":"Operators","text":"<p>Operators are symbols that are used to perform different kinds of operations with one or more operands. For example: <code>+</code>, <code>-</code>, <code>!</code> etc.</p>"},{"location":"c/d_types_ops/#types-of-operators","title":"Types of operators","text":"<p>Operators can be divided into various types based on different criterias</p>"},{"location":"c/d_types_ops/#on-basis-of-number-of-operands","title":"On basis of number of operands","text":""},{"location":"c/d_types_ops/#unary-operators","title":"unary operators","text":"<p>These operators involve only one operand to perform operation. Example are: * Increment/Decrement operators (<code>++a</code>, <code>--a</code>, <code>a++</code>, <code>a--</code>) * Not operator (<code>!a</code>)</p>"},{"location":"c/d_types_ops/#binary-operators","title":"binary operators","text":"<p>These operators involve two operands with the operator in between them. Examples are: * All arithmetic operators (<code>1+2</code>, <code>100/2</code>, ...) * Comparision operators (<code>1==2</code>, <code>5!=120</code>, <code>4&gt;5</code>) * Bitwise operators</p>"},{"location":"c/d_types_ops/#ternary-operator","title":"ternary operator","text":"<p>This operator requires three operands and is used to perform conditional operations within a single expression. Example: <pre><code>int a;\nscanf(\"%d\", &amp;a);\na&gt;10? printf(\"a is greater than 10\"): printf(\"a is less than 10\");\n</code></pre></p>"},{"location":"c/d_types_ops/#based-on-functionality","title":"Based on functionality","text":"<p>Based on the functionality of the operator operators can be divided into folllowing types:</p>"},{"location":"c/d_types_ops/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>This includes all arithmetical operators such as <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code>, <code>%</code>, <code>++</code>, <code>--</code>.</p> <p>These are used to increment or decrement the value of a number by 1. The operators can be used as pre-increment/decrement or post-increment/decrement.</p>"},{"location":"c/d_types_ops/#pre-incrementdecrement-vs-post-incrementdecrement","title":"Pre-Increment/Decrement vs Post-Increment/Decrement","text":"<p>In pre-increment/decrement the value of the variable is first modified then assigned, while in post-increment/decrement modification occurs after assignment. Example <pre><code>// post increment\nint a = 10, b;\nb = a++; // a = 11, b = 10\n// pre increment\nint x = 10, y;\ny = ++x; // x = 11, y = 11\n</code></pre></p>"},{"location":"c/d_types_ops/#relational-operators","title":"Relational Operators","text":"<p>This includes all relational operators like <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code>.</p>"},{"location":"c/d_types_ops/#logical-operators","title":"Logical Operators","text":"<p>This includes operators that are used along with conditional expressions for multiple conditions and return a value of true (1) or false (0). There are three of them:\\</p> <ul> <li>and (<code>&amp;&amp;</code>)</li> <li>or (<code>||</code>)</li> <li>not (<code>!</code>)</li> </ul> <p>Example <pre><code>#include &lt;stdio.h&gt;\n\nvoid main()\n{\n    int a = 10;\n    int b = 20;\n    if (a != 20)\n    {\n        printf(\"a is not 20\\n\");\n    }\n    if (a == 10 &amp;&amp; b == 20)\n    {\n        printf(\"a is 10 and b is 20\\n\");\n    }\n    if (a == 20 || b == 20)\n    {\n        printf(\"either a or b or both are 20\\n\");\n    }\n}\n</code></pre></p>"},{"location":"c/d_types_ops/#bitwise-operators","title":"Bitwise Operators","text":"<p>These are used to perform bitwise operations with the operands. There are 6 of them in C:</p> <ul> <li>bitwise and (<code>&amp;</code>)</li> <li>bitwise or (<code>|</code>)</li> <li>bitwise xor (<code>^</code>)</li> <li>bitwise first complement (<code>~</code>)</li> <li>bitwise right shift (<code>&gt;&gt;</code>)</li> <li>bitwise left shift (<code>&lt;&lt;</code>)</li> </ul>"},{"location":"c/d_types_ops/#assignment-operators","title":"Assignment Operators","text":"<p>These are used to assign a value to a variable. Some of them are <code>=</code>, <code>+=</code>, <code>-=</code> etc... <pre><code>int a;\na = 10 // a is 10\na+=20 // a is 30\na-=5 // a is 25\na/=5 // a is 5\na*=12 // a is 60\na%=10 // a is 2\n</code></pre></p>"},{"location":"c/d_types_ops/#conditional-operators","title":"Conditional Operators","text":"<p>The ternary conditional operator is used to perform conditional operations in the same expression block.</p> <p>Syntax:  <pre><code>condition? &lt;expression if condition is true&gt;: &lt;expression if condition is false&gt;;\n</code></pre> Example: <pre><code>#include&lt;stdio.h&gt;\n\nvoid main(){\n    int a;\n    printf(\"enter a number: \");\n    scanf(\"%d\", &amp;a);\n    a&gt;10? printf(\"a is greater than 10\"): printf(\"a is less than 10\");\n}\n</code></pre> Output <pre><code>sarthak@sarthak ~/D/c_cpp (main)&gt; gcc ternary.c; ./a.out\nenter a number: 12 \na is greater than 10\u23ce      \n</code></pre></p>"},{"location":"c/kwd_var_const/","title":"Keywords, Variables and Constants","text":""},{"location":"c/kwd_var_const/#keywords","title":"Keywords","text":"<p>Keywords in C (and any other programming languages) are special reserved tokens that represent a particular functionality or meaning. There are a total of 32 keywords in C.</p> Keywords auto break case char const continue default do double else enum extern float for goto if int long register return short signed sizeof static struct switch typedef union unsigned void volatile while <p>Each Keyword here has a significance of it's own and cannot be used in any other context.</p>"},{"location":"c/kwd_var_const/#variables","title":"Variables","text":"<p>Variables are user defined tokens that acts as a memory address for to store and fetch data in a program. Variables can be re-assigned to some other data value of the same type during the runtime.</p>"},{"location":"c/kwd_var_const/#declaring-a-variable","title":"Declaring a variable","text":"<p><pre><code>// declaration and assignment seperately:\nint a;\na = 10;\n// declarating and assigning in one line:\nint b = 20;\n</code></pre> </p> <p>A variable declaration consists of 3 parts: The data type, the variable name and the value of variable.</p>"},{"location":"c/kwd_var_const/#rules-for-naming-a-variable","title":"Rules for naming a variable","text":"<ul> <li>Name of a variable can contain alphabets (a-z, A-Z), digits (0-9) and underscore (<code>_</code>)</li> <li>Name of a variable must start with an alphabet or underscore</li> <li>A keyword cannot be used as a variable name</li> <li>There should be no space between the characters of the variable name</li> </ul>"},{"location":"c/kwd_var_const/#declaring-and-assigning-seperately-vs-during-declaration","title":"Declaring and Assigning Seperately v/s During Declaration","text":"<p>A variable can be defined initially with no value set to it to edit later. It is usually used when the program involves input from the user or the value is assigned between the program. For example: <pre><code>#include&lt;stdio.h&gt;\n\nvoid main(){\n    // declaration\n    int a;\n    printf(\"enter value of a:\");\n    // reading and assignment\n    scanf(\"%d\", &amp;a);\n}\n</code></pre></p> <p>The <code>scanf</code> function will be explained in further articles.</p>"},{"location":"c/kwd_var_const/#constants","title":"Constants","text":"<p>Constant are tokens that act as a memory address that store a value and can be used to fetch it. They are similar to variables except for that they can not be modified once assigned to a value. The naming constraints for constants are same as variable's.</p>"},{"location":"c/kwd_var_const/#declaring-a-constant","title":"Declaring a constant","text":"<p>Constants can be defined using the <code>const</code> keyword. For example  <pre><code>const int year = 2024;\n</code></pre></p> <p>The value <code>year</code> here is an constant and can not be changed or reassigned. The compiler shows the following error when we try to reassign it: </p> <p>Code (const.c) <pre><code>#include&lt;stdio.h&gt;\n\nint main(){\n    const int year = 2023;\n    year = 2024;\n    return 0;\n}\n</code></pre></p> <p>Error <pre><code>sarthak@sarthak ~/D/c_cpp (main)&gt; gcc const.c \nconst.c: In function \u2018main\u2019:\nconst.c:5:10: error: assignment of read-only variable \u2018year\u2019\n    5 |     year = 2025;\n      |          ^\n</code></pre></p>"},{"location":"c/structure/","title":"Structure of a C program","text":""},{"location":"c/structure/#hello-world","title":"hello, world!","text":"<p>This is a hello world program in C.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n    printf(\"hello, world!\\n\");\n    return 0;\n}\n</code></pre> <ul> <li>The <code>main</code> function is the entrypoint of our code. It's the part of code that runs first whenever the program is compiled and executed.</li> <li>The <code>printf</code> function displays the provided format string to the console.</li> <li>The main function must return either an integer or <code>void</code> (nothing).</li> <li><code>stdio.h</code> header file must be included in order to perform input and output operations with the terminal.</li> </ul>"},{"location":"c/structure/#parts-of-a-c-program","title":"Parts of a c program","text":"<p>Warning</p> <p>Contains functions and topics not covered yet for illustration purpose.</p> <pre><code>/*\n    This is a program illustrating various parts of a C program.\n*/\n#include&lt;stdio.h&gt;\n\n#define PI 3.14\n\nint square(int);\nfloat circle(int);\n\nint main() {\n  int a = 10;\n  printf(\"area of a square with side %d is %d\\n\", a, square(a));\n  printf(\"area of a circle with side %d is %.2f\\n\", a, circle(a));\n  return 0;\n}\n\nint square(int s) {\n  return s * s;\n}\nfloat circle(int r) {\n  return 3.14 * (float) r * (float) r;\n}\n</code></pre> <p>This code can be divided into parts:</p>"},{"location":"c/structure/#documentation","title":"Documentation","text":"<p>Comments explaining parts of the code comes under documentation <pre><code>/*\n    This is a program illustrating various parts of a C program.\n*/\n</code></pre></p>"},{"location":"c/structure/#pre-processor","title":"Pre-processor","text":"<p>Header files and definitions in the top of the file are pre-processors <pre><code>#include&lt;stdio.h&gt;\n\n#define PI 3.14\n</code></pre></p>"},{"location":"c/structure/#main-function","title":"main function","text":"<p>This is the entrypoint of the program. The main function should always return an <code>int</code> or <code>void</code>. If the program is able to run successfully <code>0</code> is returned. <pre><code>int main(){\n    ...\n    return 0;\n}\n</code></pre></p>"},{"location":"c/structure/#user-defined-functions","title":"User defined functions","text":"<p>User defined functions like  <code>square</code> and <code>circle</code> are used as sub-programs for organising code and providing reusability of code. <pre><code>int square(int);\nfloat circle(int);\n\nint square(int s) {\n  return s * s;\n}\nfloat circle(int r) {\n  return 3.14 * (float) r * (float) r;\n}\n</code></pre></p>"}]}